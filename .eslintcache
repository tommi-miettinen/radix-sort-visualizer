[{"C:\\Users\\tommi\\Desktop\\radixvisual\\src\\App.tsx":"1","C:\\Users\\tommi\\Desktop\\radixvisual\\src\\index.tsx":"2","C:\\Users\\tommi\\Desktop\\radixvisual\\src\\components\\Numbers.tsx":"3","C:\\Users\\tommi\\Desktop\\radixvisual\\src\\components\\Comment.tsx":"4","C:\\Users\\tommi\\Desktop\\radixvisual\\src\\components\\Buckets.tsx":"5","C:\\Users\\tommi\\Desktop\\radixvisual\\src\\components\\Bucket.tsx":"6"},{"size":3822,"mtime":1612190488454,"results":"7","hashOfConfig":"8"},{"size":197,"mtime":1612103523934,"results":"9","hashOfConfig":"8"},{"size":1348,"mtime":1612188953384,"results":"10","hashOfConfig":"8"},{"size":788,"mtime":1612191459307,"results":"11","hashOfConfig":"8"},{"size":855,"mtime":1612188934376,"results":"12","hashOfConfig":"8"},{"size":2188,"mtime":1612191321549,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"1y1khil",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\tommi\\Desktop\\radixvisual\\src\\App.tsx",["28","29"],"import { useState } from \"react\";\nimport Numbers from \"./components/Numbers\";\nimport Buckets from \"./components/Buckets\";\nimport Comment from \"./components/Comment\";\nimport TsIcon from \"./tsicon.png\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [nums, setNums] = useState<number[]>([\n    3,\n    4,\n    2,\n    2000,\n    122,\n    3241,\n    313,\n    777,\n    10,\n    8,\n    733,\n    337,\n    5000,\n  ]);\n  const [bucketsData, setBucketsData] = useState<number[][]>([]);\n  const [currentDigit, setCurrentDigit] = useState<number | undefined>();\n  const [currentNum, setCurrentNum] = useState<number | undefined>();\n  const [pushingToBuckets, setPushingToBuckets] = useState<boolean>(true);\n  const [running, setRunning] = useState<boolean>(false);\n  const [done, setDone] = useState<boolean>(false);\n\n  const getMaxDigits = (arr: number[]) => {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n      let digits = arr[i].toString().length;\n      if (digits > count) count = digits;\n    }\n    return count;\n  };\n\n  const createBuckets = (): number[][] => {\n    return Array.from({ length: 10 }, () => []);\n  };\n\n  const blocker = (ms: number) => {\n    return new Promise((res) => setTimeout(res, ms));\n  };\n  function getDigit(num: number, i: number) {\n    return Math.floor(Math.abs(num) / Math.pow(10, i)) % 10;\n  }\n\n  const resetStateInputs = () => {\n    setCurrentNum(undefined);\n    setCurrentDigit(undefined);\n    setPushingToBuckets(true);\n    setDone(true);\n    setRunning(false);\n  };\n\n  const radixSort = async (arr: number[]) => {\n    setDone(false);\n    setRunning(true);\n    let count = getMaxDigits(arr);\n    for (let i = 0; i < count; i++) {\n      setCurrentDigit(i);\n      setCurrentNum(undefined);\n      await blocker(500);\n      let buckets = createBuckets();\n      await blocker(500);\n      let numsCopy = [...arr];\n      let bucketsCopy = [...buckets];\n      setBucketsData(buckets);\n      for (let j = 0; j < arr.length; j++) {\n        // pushing to buckets\n        setPushingToBuckets(true);\n        await blocker(500);\n        let num = arr[j].toString();\n        let lastDigit = getDigit(parseInt(num), i);\n        setCurrentNum(arr[j]);\n        await blocker(500);\n        bucketsCopy[lastDigit].push(arr[j]);\n        numsCopy = numsCopy.filter((number) => number !== arr[j]);\n        setNums(numsCopy);\n        setBucketsData(bucketsCopy);\n      }\n      arr = buckets.flat();\n      for (let k = 0; k < arr.length; k++) {\n        // pushing to nums\n        setPushingToBuckets(false);\n        await blocker(500);\n        setCurrentNum(arr[k]);\n        await blocker(500);\n        numsCopy.push(arr[k]);\n        bucketsCopy = bucketsCopy.map((bucket) =>\n          bucket.filter((num) => num !== arr[k])\n        );\n        setBucketsData(bucketsCopy);\n        setNums([...numsCopy]);\n      }\n    }\n    resetStateInputs();\n    return arr;\n  };\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"filename-tab\">\n        <img width=\"20\" src={TsIcon} alt=\"typescript icon\" />\n        <span>radix-sort.tsx</span>\n      </div>\n      <div className=\"items-container\">\n        <div style={{ marginBottom: 30 }}>\n          <Comment\n            currentDigit={currentDigit}\n            pushingToBuckets={pushingToBuckets}\n            done={done}\n          />\n        </div>\n        <Numbers\n          currentNum={currentNum}\n          currentDigit={currentDigit}\n          nums={nums}\n        />\n        <Buckets\n          currentNum={currentNum}\n          currentDigit={currentDigit}\n          buckets={bucketsData}\n        />\n        <span\n          className=\"start\"\n          onClick={running ? () => {} : () => radixSort(nums)}\n        >\n          sort(<span style={{ color: \"#9cddfd\" }}>numbers</span>);\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n",["30","31"],"C:\\Users\\tommi\\Desktop\\radixvisual\\src\\index.tsx",[],"C:\\Users\\tommi\\Desktop\\radixvisual\\src\\components\\Numbers.tsx",[],"C:\\Users\\tommi\\Desktop\\radixvisual\\src\\components\\Comment.tsx",[],"C:\\Users\\tommi\\Desktop\\radixvisual\\src\\components\\Buckets.tsx",[],"C:\\Users\\tommi\\Desktop\\radixvisual\\src\\components\\Bucket.tsx",[],{"ruleId":"32","severity":1,"message":"33","line":82,"column":36,"nodeType":"34","messageId":"35","endLine":82,"endColumn":65},{"ruleId":"32","severity":1,"message":"33","line":94,"column":39,"nodeType":"34","messageId":"35","endLine":95,"endColumn":49},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'arr'.","ArrowFunctionExpression","unsafeRefs","no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-global-assign","no-unsafe-negation"]